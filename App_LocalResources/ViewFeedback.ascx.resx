<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllFeedback.Text" xml:space="preserve">
    <value>All Feedback</value>
  </data>
  <data name="MyFeedback.Text" xml:space="preserve">
    <value>My Feedback</value>
  </data>
  <data name="Tracking.Text" xml:space="preserve">
    <value>Feedback I am Tracking</value>
  </data>
  <data name="Subscribe.Text" xml:space="preserve">
    <value>Subscribe to this suggestion</value>
  </data>
  <data name="NotLoggedInSubscribe.Text" xml:space="preserve">
    <value>You must be logged in to subscribe.</value>
  </data>
  <data name="FeedbackID.Text" xml:space="preserve">
    <value>Feedback ID: </value>
  </data>
  <data name="Status.Text" xml:space="preserve">
    <value>Status: </value>
  </data>
  <data name="Open.Text" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="Closed.Text" xml:space="preserve">
    <value>Closed</value>
  </data>
  <data name="Product.Text" xml:space="preserve">
    <value>Product: </value>
  </data>
  <data name="Resolution.Text" xml:space="preserve">
    <value>Implemented? </value>
  </data>
  <data name="CreatedOn.Text" xml:space="preserve">
    <value>Created On: </value>
  </data>
  <data name="CreatedBy.Text" xml:space="preserve">
    <value>Created By: </value>
  </data>
  <data name="Details.Text" xml:space="preserve">
    <value>Details: </value>
  </data>
  <data name="Voting.Text" xml:space="preserve">
    <value>Voting</value>
  </data>
  <data name="VotesTotal.Text" xml:space="preserve">
    <value>({0} votes)</value>
  </data>
  <data name="ThumbsUp.Text" xml:space="preserve">
    <value>Thumbs Up</value>
  </data>
  <data name="ThumbsDown.Text" xml:space="preserve">
    <value>Thumbs Down</value>
  </data>
  <data name="SelectVoteType.Text" xml:space="preserve">
    <value>You must select either thumbs up or down.</value>
  </data>
  <data name="NotLoggedIn.Text" xml:space="preserve">
    <value>You must be logged in to vote.</value>
  </data>
  <data name="AlreadyVoted.Text" xml:space="preserve">
    <value>You have already voted on this suggestion.</value>
  </data>
  <data name="btnRegisterVote.Text" xml:space="preserve">
    <value>Register Vote</value>
  </data>
  <data name="btnEditFeedback.Text" xml:space="preserve">
    <value>Edit Feedback</value>
  </data>
  <data name="HowWouldYouVote.Text" xml:space="preserve">
    <value>How would you rate this enhancement?</value>
  </data>
  <data name="Comments.Text" xml:space="preserve">
    <value>Comments</value>
  </data>
  <data name="NoComments.Text" xml:space="preserve">
    <value>There are currently no comments.</value>
  </data>
  <data name="PostComment.Text" xml:space="preserve">
    <value>Post Comment</value>
  </data>
  <data name="valComment.ErrorMessage" xml:space="preserve">
    <value>&lt;br&gt;Comment Is Required</value>
  </data>
  <data name="btnPostComment.Text" xml:space="preserve">
    <value>Post Comment</value>
  </data>
  <data name="PostCommentNotAuthorized.Text" xml:space="preserve">
    <value>You don't have permission to comment.</value>
  </data>
  <data name="CommentNotificationSubject.Text" xml:space="preserve">
    <value>[PORTALNAME]: Feedback Notification</value>
  </data>
  <data name="CommentNotification.Text" xml:space="preserve">
    <value>At [POSTDATE] a comment was posted to a suggestion you are tracking:- [TITLE].

[COMMENT]

To view the complete suggestion and reply, please visit:
[LINK]

Thank you,
[PORTALNAME]
		</value>
  </data>
  <data name="cmdDeleteComment.Text" xml:space="preserve">
    <value>(Delete Comment)</value>
  </data>
  <data name="ControlTitle_viewfeedback.Text" xml:space="preserve">
    <value>View Feedback</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;h1&gt;About View Feedback&lt;/h1&gt;&lt;p&gt;The module displays a specific feedback item.&lt;/p&gt;</value>
  </data>
  <data name="valEmail.ErrorMessage" xml:space="preserve">
    <value>&lt;br&gt;Email Is Required.</value>
  </data>
  <data name="valEmailIsValid.ErrorMessage" xml:space="preserve">
    <value>&lt;br&gt;Invalid Email Address.</value>
  </data>
  <data name="valName.ErrorMessage" xml:space="preserve">
    <value>&lt;br&gt;Name Is Required.</value>
  </data>
  <data name="VoteNotAuthorized.Text" xml:space="preserve">
    <value>You don't have permission to vote.</value>
  </data>
  <data name="Approval.Text" xml:space="preserve">
    <value>At [POSTDATE] a new comment was posted to [TITLE].

This comment requires approval, you may approve it here:
[LINK]

Thank you,
[PORTALNAME]
		</value>
  </data>
  <data name="ApprovalMessage.Text" xml:space="preserve">
    <value>Your comment has been submitted but requires approval before becoming visible.</value>
  </data>
  <data name="ApprovalSubject.Text" xml:space="preserve">
    <value>[PORTALNAME]: New Comment Requires Approval</value>
  </data>
  <data name="InvalidCaptcha.Text" xml:space="preserve">
    <value>You must enter a valid code.</value>
  </data>
</root>